apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'


def getStartAppSdkId() {
    if (project.keystorePropertiesFile.exists()) {
        def keystoreProperties = new Properties()
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
        return keystoreProperties.getProperty("startAppId")
    } else {
        return ""
    }
}

android {
    signingConfigs {
        release {
            if (project.keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
            }
        }
    }
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.kgeorgiev.notes"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 4
        versionName "1.0.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                        "room.incremental"   : "true"]
            }
        }

        compileOptions {
            sourceCompatibility 1.8
            targetCompatibility 1.8
        }
    }
    buildTypes {
        release {
            buildConfigField "String", "ADS_SDK_ID", "\"" + getStartAppSdkId() + "\""
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            buildConfigField "String", "ADS_SDK_ID", "\"" + getStartAppSdkId() + "\""
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'


    // Material design
    implementation 'com.google.android.material:material:1.0.0'

    //Dagger
    implementation 'com.google.dagger:dagger-android:2.24'
    implementation 'com.google.dagger:dagger-android-support:2.24'
    implementation "com.google.dagger:dagger:2.24"

    kapt "com.google.dagger:dagger-compiler:2.24"
    kapt "com.google.dagger:dagger-android-processor:2.24"


    // ViewModels
    implementation 'androidx.lifecycle:lifecycle-extensions:2.1.0'
    kapt "android.arch.lifecycle:compiler:2.1.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0-alpha04"

    // Room
    implementation 'androidx.room:room-runtime:2.1.0'
    kapt 'androidx.room:room-compiler:2.1.0'
    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:2.1.0"

    // Lottie
    implementation 'com.airbnb.android:lottie:3.0.7'

    // Biometrics
    implementation 'androidx.biometric:biometric:1.0.0-rc01'

    // ViewPager circle-indicator
    implementation 'me.relex:circleindicator:2.1.4'

    // Material time-dialogs
    implementation 'com.wdullaer:materialdatetimepicker:4.2.3'

    // View-pager transformer
    implementation 'com.eftimoff:android-viewpager-transformers:1.0.1@aar'

    // Ads sdk
}
